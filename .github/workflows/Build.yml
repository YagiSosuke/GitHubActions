#name       ワークフローのなまえ
#on         動作イベント
#jobs       ジョブの単位
#runs-on    ジョブを実行するマシン
#steps      実行されるステップをグループ化
#uses       ここで指定したアクションが実行される
#run        プログラムを実行するようにジョブに指示する
#name       runの手前に書くと名前を付けることができる

name: auto_build_setting
on:
  workflow_dispatch

env:
  filePath: My project/ProjectSettings/ProjectSettings.asset

jobs:
  auto_build_setting:
    runs-on: ubuntu-latest
    permissions:
      contents: write    #プッシュ権限を与える
    steps:
      - name: リポジトリのクローン
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全ての履歴を取得

      - name: 設定 - Gitユーザー名とメールアドレス
        run: |
          git config --local user.email "yagikundayo@gmail.com"
          git config --local user.name "YagiSosuke"
      - name: リモートブランチをフェッチ
        run: git fetch --all

      - name: 早期return
        run: exit 0

      #ここから、Build/Developブランチの更新を行います
      - name: Build/Developブランチをチェックアウト
        run: |
          git checkout Build/Develop
          git pull origin Build/Develop
      - name: mainブランチをマージ
        run: git merge origin/main

      #bundleVersionを更新
      - name: bundleVersionを更新
        run: |
          #現在のバージョン
          currentVersion=$(yq '.PlayerSettings.bundleVersion' "$filePath")

          # バージョン番号を分割 (例: 1.0.0 → major=1, minor=0, patch=0)
          IFS='.' read -r major minor patch <<< "$currentVersion"
        
          #新しいバージョン
          patch=$((patch+1))
          newVersion="$major.$minor.$patch"

          # sedでバージョンを書き換え
          sed -i "s/bundleVersion: .*/bundleVersion: $newVersion/" "$filePath"
          echo "Updated file content:"
          cat "$filePath"

          #バージョン番号を他のステップで再利用できるようにする
          echo "newVersion=$newVersion" >> $GITHUB_ENV
      # 変更をコミット
      - name: 変更をコミット
        run: |
          git add "$filePath"
          git commit -m "ver $newVersion"
        
      - name: 変更をプッシュ
        run:
          git push origin Build/Develop
